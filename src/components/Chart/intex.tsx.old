import {createChart, CrosshairMode, ISeriesApi} from 'lightweight-charts';
import * as React from 'react';
import {cryptoHttp} from '../../http';
import {Label} from '../Label';
import './index.css';
interface IChartProps {
	coin: string
};

export const Chart: React.FC<IChartProps> = ({ coin }) => {
	const containerRef = React.useRef() as React.MutableRefObject<HTMLDivElement>
	const candleSeriesRef = React.useRef() as React.MutableRefObject<ISeriesApi<"Candlestick">>

	const [prices, setPrices] = React.useState([]);
	const [chartLoaded, setChartLoaded] = React.useState(false);

	React.useEffect(() => {
		if (!chartLoaded) {
			return
		}
		cryptoHttp.get(`histoday?fsym=${coin}&tsym=BRL&limit=300`)
		.then(res => {
			const prices = res.data.Data.map((row: any) => ({
				time: row.time,
				low: row.low,
				high: row.high,
				open: row.open,
				close: row.close,
				volume: row.volumefrom,
			}))
			setPrices(prices);
		})
	}, [coin, chartLoaded])

	React.useEffect(() => {
		if (candleSeriesRef.current) {
			candleSeriesRef.current.setData(prices);
		}
	}, [prices])

	React.useEffect(() => {
		setPrices([]);
	}, [coin])

	React.useEffect(() => {
		const chart = createChart(containerRef.current, {
			width: containerRef.current.clientWidth,
			height: containerRef.current.clientHeight,
			layout: {
				backgroundColor: "#253248",
				textColor: "rgba(255, 255, 255, 0.9)",
			},
			grid: {
				vertLines: {
					color: "#334158",
				},
				horzLines: {
					color: "#334158",
				},
			},
			crosshair: {
				mode: CrosshairMode.Normal,
			},
			//@ts-ignore
			priceScale: {
				borderColor: "#485c7b"
			},
			timeScale: {
				borderColor: "#485c7b"
			},
		});

		candleSeriesRef.current = chart.addCandlestickSeries({
			upColor: "#4bffb5",
			downColor: "#ff4976",
			borderDownColor: "#ff4976",
			borderUpColor: "#4bffb5",
			wickDownColor: "#838ca1",
			wickUpColor: "#838ca1",
		});
		setChartLoaded(true);
	}, [])
	return (
		<div className="Chart" ref={containerRef}>
			<Label>{coin}</Label>
		</div>
	);
};
